# ==========================================================================================================
# This file is for shift related settings or as from our derivative software duty commands, for example
# shift manage, which allow you to start, stop, or take a break while working with shifts, this will also
# hold the shift leaderboard commands and all other shift operations. The software that this project derived
# from originally called it duty, and had duty manage, this would be similar.
# ==========================================================================================================

import discord
from discord.ext import commands
from discord import app_commands

class ShiftButtons(discord.ui.View):
    def __init__(self, state: str = "idle"):
        super().__init__(timeout=None)
        self.state = state
        self.update_buttons()

    def update_buttons(self):
        self.clear_items()
        if self.state == "idle":
            self.add_item(discord.ui.Button(label="Start", style=discord.ButtonStyle.success, custom_id="shift_start"))
        elif self.state == "active":
            self.add_item(discord.ui.Button(label="Break", style=discord.ButtonStyle.primary, custom_id="shift_break"))
            self.add_item(discord.ui.Button(label="Stop", style=discord.ButtonStyle.danger, custom_id="shift_stop"))
        elif self.state == "break":
            self.add_item(discord.ui.Button(label="Resume", style=discord.ButtonStyle.success, custom_id="shift_resume"))
            self.add_item(discord.ui.Button(label="Stop", style=discord.ButtonStyle.danger, custom_id="shift_stop"))

class ShiftCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.embed_color = 0x00FF00

    @commands.Cog.listener()
    async def on_ready(self):
        print("ShiftCog loaded and ready.")

    @discord.app_commands.command(name="shiftmanage", description="Manage your shift with buttons")
    async def shift_manage(self, interaction: discord.Interaction):
        guild_id = interaction.guild_id
        user_id = interaction.user.id
        try:
            conn = mysql.connector.connect(**self.db_config)
            cursor = conn.cursor()
            
            cursor.execute(
                "SELECT status FROM user_shifts WHERE guild_id = %s AND user_id = %s AND end_time IS NULL",
                (guild_id, user_id)
            )
            row = cursor.fetchone()
            current_state = row[0] if row else "idle"
            
            view = ShiftButtons(state=current_state)
            embed = discord.Embed(
                title="Shift Management",
                description=f"{interaction.user.mention}, use the buttons to manage your shift.",
                color=self.embed_color
            )
            embed.add_field(name="Current Status", value=current_state.capitalize(), inline=True)
            embed.add_field(name="Server", value=interaction.guild.name, inline=True)
            embed.set_author(name=interaction.user.display_name, icon_url=interaction.user.avatar.url if interaction.user.avatar else None)
            embed.set_footer(text="Rift Staff Management")
            await interaction.response.send_message(embed=embed, view=view)
            
            cursor.close()
            conn.close()
